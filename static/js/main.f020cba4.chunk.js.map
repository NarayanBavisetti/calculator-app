{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","expressions","setExpressions","oldExpression","setOldExpressions","numerics","Set","oprators","evaluateRes","evaluate","eval","String","handleKeyUp","event","console","log","key","slice","has","buttons","className","tabIndex","onKeyUp","style","width","background","display","flexDirection","alignItems","justifyContent","padding","borderRadius","flexWrap","borderColor","map","buttonvalue","margin","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2yBAGA,SAASA,MACP,cAAsCC,oDAAS,IAA/C,qIAAOC,YAAP,cAAoBC,eAApB,cACA,WAA2CF,oDAAS,IAApD,sIAAOG,cAAP,cAAsBC,kBAAtB,cACMC,SAAW,IAAIC,IAAI,cACnBC,SAAW,IAAID,IAAI,QAErBE,YAAc,SAAdA,cACF,IAAIC,SAAWC,KAAKT,aACpBG,kBAAkBH,aAClBC,eAAeS,OAAOF,YAGpBG,YAAc,SAAUC,GAC1BC,QAAQC,IAAIF,EAAMG,KACA,cAAdH,EAAMG,IACRd,eAAeD,YAAYgB,MAAM,GAAI,IAC5BZ,SAASa,IAAIL,EAAMG,MAAQT,SAASW,IAAIL,EAAMG,KACvDd,eAAeD,YAAcY,EAAMG,KACZ,UAAdH,EAAMG,KACrBR,eAIMW,QAAU,CAAC,IAAI,IACjB,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEF,OACE,mEAAKC,UAAU,MAAMC,SAAU,EAAGC,QAASV,YAA3C,UACE,mEACEW,MAAO,CACLC,MAAO,QACPC,WAAY,UACZC,QAAS,OACTC,cAAe,SACfC,WAAY,WACZC,eAAgB,SAChBC,QAAS,OACTC,aAAc,QATlB,UAYE,0EAAK5B,gBACL,0EAAKF,cACL,yFAEF,kEACEsB,MAAO,CACLC,MAAO,QACPC,WAAY,UACZC,QAAS,OACTC,cAAe,MACfC,WAAY,WACZC,eAAgB,SAChBC,QAAS,OACTC,aAAc,OACdC,SAAU,OACVC,YAAY,WAXhB,SAeLd,QAAQe,KAAI,SAACC,GACZ,OACE,qEAAQZ,MAAO,CACbC,MAAO,OACPY,OAAQ,OAEPC,QAAS,WACS,MAAhBF,EACD3B,cAIAN,eADqB,MAAfiC,EACSlC,YAAYgB,MAAM,GAAI,GAOxBhB,YAAckC,IAjB/B,SAoBGA,YASQpC,2B,gIClGAuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClD,EAAA,EAAD,MAEFmD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f020cba4.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [expressions, setExpressions] = useState(\"\");\r\n  const [oldExpression, setOldExpressions] = useState(\"\");\r\n  const numerics = new Set(\"0123456789\");\r\n  const oprators = new Set(\"+-/*\");\r\n\r\n  let evaluateRes = () => {\r\n    let evaluate = eval(expressions);\r\n    setOldExpressions(expressions);\r\n    setExpressions(String(evaluate));\r\n  }\r\n\r\n  let handleKeyUp = function (event) {\r\n    console.log(event.key);\r\n    if (event.key === \"Backspace\") {\r\n      setExpressions(expressions.slice(0, -1));\r\n    } else if (numerics.has(event.key) || oprators.has(event.key)) {\r\n      setExpressions(expressions + event.key);\r\n    } else if (event.key === \"Enter\") {\r\nevaluateRes()\r\n    }\r\n  };\r\n\r\n  let buttons = [\"(\",\")\",\r\n    \"%\",\r\n    \"AC\",\r\n    \"7\",\r\n    \"8\",\r\n    \"9\",\r\n    \"/\",\r\n    \"4\",\r\n    \"5\",\r\n    \"6\",\r\n    \"*\",\r\n    \"1\",\r\n    \"2\",\r\n    \"3\",\r\n    \"-\",\r\n    \"0\",\r\n    \".\",\r\n    \"=\",\r\n    \"+\",\r\n  ];\r\n  return (\r\n    <div className=\"App\" tabIndex={0} onKeyUp={handleKeyUp}>\r\n      <div\r\n        style={{\r\n          width: \"400px\",\r\n          background: \"#ffffff\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"flex-end\",\r\n          justifyContent: \"center\",\r\n          padding: \"20px\",\r\n          borderRadius: \"10px\",\r\n        }}\r\n      >\r\n        <h6>{oldExpression}</h6>\r\n        <h1>{expressions}</h1>\r\n        <h3>narayan</h3>\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: \"400px\",\r\n          background: \"#ffffff\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          alignItems: \"flex-end\",\r\n          justifyContent: \"center\",\r\n          padding: \"20px\",\r\n          borderRadius: \"10px\",\r\n          flexWrap: \"wrap\",\r\n          borderColor:\"#000000\",\r\n         \r\n        }}\r\n      >\r\n{buttons.map((buttonvalue)=> {\r\n  return(\r\n    <button style={{\r\n      width: \"90px\",\r\n      margin: \"5px\",\r\n\r\n    }} onClick={() => {\r\n      if(buttonvalue === \"=\"){\r\n        evaluateRes();\r\n\r\n      }\r\n      else if(buttonvalue == \"AC\"){\r\n        setExpressions(expressions.slice(0, -1));\r\n      }\r\n//       else if(evaluateRes + buttonvalue)\r\n// {\r\n\r\n// }\r\n      else{\r\n      setExpressions(expressions + buttonvalue)\r\n    }\r\n    }}>\r\n      {buttonvalue}\r\n    </button>\r\n  )\r\n})}\r\n</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}